{
  "version": 3,
  "sources": ["../../node_modules/content-type/index.js", "../../node_modules/unsplash-js/src/helpers/typescript.ts", "../../node_modules/unsplash-js/src/helpers/fp.ts", "../../node_modules/unsplash-js/src/helpers/errors.ts", "../../node_modules/unsplash-js/src/helpers/json.ts", "../../node_modules/unsplash-js/src/helpers/response.ts", "../../node_modules/unsplash-js/src/helpers/url.ts", "../../node_modules/unsplash-js/src/helpers/request.ts", "../../node_modules/unsplash-js/src/helpers/feed.ts", "../../node_modules/unsplash-js/src/helpers/query.ts", "../../node_modules/unsplash-js/src/methods/collections/index.ts", "../../node_modules/unsplash-js/src/methods/photos/index.ts", "../../node_modules/unsplash-js/src/methods/search/index.ts", "../../node_modules/unsplash-js/src/methods/users/index.ts", "../../node_modules/unsplash-js/src/methods/topics/index.ts", "../../node_modules/unsplash-js/src/beacon.ts", "../../node_modules/unsplash-js/src/methods/search/types/request.ts", "../../node_modules/unsplash-js/src/types/request.ts", "../../node_modules/unsplash-js/src/index.ts"],
  "sourcesContent": ["/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g // eslint-disable-line no-control-regex\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/ // eslint-disable-line no-control-regex\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.slice(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value.charCodeAt(0) === 0x22 /* \" */) {\n        // remove quotes\n        value = value.slice(1, -1)\n\n        // remove escapes\n        if (value.indexOf('\\\\') !== -1) {\n          value = value.replace(QESC_REGEXP, '$1')\n        }\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n", "// Copied from https://github.com/Microsoft/TypeScript/issues/1897#issuecomment-338650717\nexport type AnyJson = boolean | number | string | null | JsonArray | JsonMap;\nexport type JsonMap = { [key: string]: AnyJson };\nexport type JsonArray = Array<AnyJson>;\n\nexport const checkIsString = getRefinement(\n  (value: unknown): Nullable<string> => (typeof value === 'string' ? value : null),\n);\n\n/**\n * https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-377567046\n */\nexport type OmitStrict<T, K extends keyof T> = Omit<T, K>;\n\n/**\n * Unlike TypeScript's `NonNullable`, this does _not_ include `undefined`\n */\nexport type Nullable<T> = T | null;\n\nexport const isDefined = <T>(x: T | null | undefined): x is T => x !== null && x !== undefined;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\n\ntype Refinement<A, B extends A> = (a: A) => a is B;\nexport function getRefinement<A, B extends A>(getB: (a: A) => Nullable<B>): Refinement<A, B> {\n  return (a: A): a is B => isDefined(getB(a));\n}\n\nexport const checkIsNonEmptyArray = <T>(a: T[]): a is NonEmptyArray<T> => a.length > 0;\n", "import { isDefined } from './typescript';\n\n/** Takes a dictionary containing nullish values and returns a dictionary of all the defined\n * (non-nullish) values.\n */\nexport const compactDefined = <A>(obj: Record<string, A | null | undefined>) =>\n  Object.keys(obj).reduce<Record<string, A>>((acc, key) => {\n    const value = obj[key];\n    return {\n      ...acc,\n      ...(isDefined(value) ? { [key]: value } : {}),\n    };\n  }, {});\n\n/**\n * copied from `fp-ts`\n * https://github.com/gcanti/fp-ts/blob/70190b5a03ddc2d31b4708c75c6dfad81d0bfa21/perf/function/flow.tÂ¡s\n */\nexport function flow<A extends Array<unknown>, B>(ab: (...a: A) => B): (...a: A) => B;\nexport function flow<A extends Array<unknown>, B, C>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n): (...a: A) => C;\nexport function flow<A extends Array<unknown>, B, C, D>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (b: C) => D,\n): (...a: A) => D;\nexport function flow(...fns: Array<Function>): Function {\n  const len = fns.length - 1;\n  return function(this: any, ...x: Array<any>) {\n    let y = fns[0].apply(this, x);\n    for (let i = 1; i <= len; i++) {\n      y = fns[i].call(this, y);\n    }\n    return y;\n  };\n}\n", "import {\n  AnyJson,\n  checkIsString,\n  getRefinement,\n  isDefined,\n  checkIsNonEmptyArray,\n  JsonMap,\n  NonEmptyArray,\n  Nullable,\n} from './typescript';\n\nexport type Errors = NonEmptyArray<string>;\nexport type ErrorSource = 'api' | 'decoding';\n\nconst checkIsObject = getRefinement(\n  (response: AnyJson): Nullable<JsonMap> =>\n    isDefined(response) && typeof response === 'object' && !Array.isArray(response)\n      ? response\n      : null,\n);\n\nconst checkIsErrors = getRefinement(\n  (errors: AnyJson): Nullable<Errors> =>\n    Array.isArray(errors) && errors.every(checkIsString) && checkIsNonEmptyArray(errors)\n      ? errors\n      : null,\n);\n\nconst checkIsApiError = getRefinement(\n  (response: AnyJson): Nullable<{ errors: Errors }> =>\n    checkIsObject(response) && 'errors' in response && checkIsErrors(response.errors)\n      ? { errors: response.errors }\n      : null,\n);\n\nexport const getErrorForBadStatusCode = (\n  jsonResponse: AnyJson,\n): { errors: Errors; source: ErrorSource } => {\n  if (checkIsApiError(jsonResponse)) {\n    return { errors: jsonResponse.errors, source: 'api' };\n  } else {\n    return {\n      errors: [\n        'Responded with a status code outside the 2xx range, and the response body is not recognisable.',\n      ],\n      source: 'decoding',\n    };\n  }\n};\n\nexport class DecodingError {\n  constructor(readonly message: string) {}\n}\n", "import * as ContentTypeHelpers from 'content-type';\nimport { DecodingError } from './errors';\nimport { AnyJson, isDefined } from './typescript';\n\nconst CONTENT_TYPE_RESPONSE_HEADER = 'content-type';\nconst CONTENT_TYPE_JSON = 'application/json';\nconst checkIsJsonResponse = (response: Response) => {\n  const contentTypeHeader = response.headers.get(CONTENT_TYPE_RESPONSE_HEADER);\n\n  return (\n    isDefined(contentTypeHeader) &&\n    ContentTypeHelpers.parse(contentTypeHeader).type === CONTENT_TYPE_JSON\n  );\n};\n\n/**\n * Note: restrict the type of JSON to `AnyJson` so that `any` doesn't leak downstream.\n */\nexport const getJsonResponse = (response: Response): Promise<AnyJson> => {\n  if (checkIsJsonResponse(response)) {\n    return response.json().catch(_err => {\n      throw new DecodingError('unable to parse JSON response.');\n    });\n  } else {\n    throw new DecodingError('expected JSON response from server.');\n  }\n};\n", "import { Errors, ErrorSource, getErrorForBadStatusCode, DecodingError } from './errors';\nimport { getJsonResponse } from './json';\n\nexport type ApiResponse<T> =\n  | {\n      type: 'success';\n      response: T;\n      originalResponse: Response;\n      errors?: never;\n      status: number;\n    }\n  | {\n      type: 'error';\n      source: ErrorSource;\n      response?: never;\n      originalResponse: Response;\n      errors: Errors;\n      status: number;\n    };\n\nexport type HandleResponse<T> = (args: { response: Response }) => Promise<T>;\n\nexport const handleFetchResponse = <ResponseType>(handleResponse: HandleResponse<ResponseType>) => (\n  response: Response,\n): Promise<ApiResponse<ResponseType>> =>\n  (response.ok\n    ? handleResponse({ response }).then(\n        (handledResponse): ApiResponse<ResponseType> => ({\n          type: 'success',\n          status: response.status,\n          response: handledResponse,\n          originalResponse: response,\n        }),\n      )\n    : getJsonResponse(response).then(\n        (jsonResponse): ApiResponse<ResponseType> => ({\n          type: 'error',\n          status: response.status,\n          ...getErrorForBadStatusCode(jsonResponse),\n          originalResponse: response,\n        }),\n      )\n  ).catch(error => {\n    /**\n     * We want to separate expected decoding errors from unknown ones. We do so by throwing a custom\n     * `DecodingError` whenever we encounter one within `handleFetchResponse` and catch them all\n     * here. This allows us to easily handle all of these errors at once. Unexpected errors are not\n     * caught, so that they bubble up and fail loudly.\n     *\n     * Note: Ideally we'd use an Either type, but this does the job without introducing dependencies\n     * like `fp-ts`.\n     */\n    if (error instanceof DecodingError) {\n      return {\n        type: 'error',\n        source: 'decoding',\n        status: response.status,\n        originalResponse: response,\n        errors: [error.message],\n      };\n    } else {\n      throw error;\n    }\n  });\n\nexport const castResponse = <T>(): HandleResponse<T> => ({ response }) =>\n  (getJsonResponse(response) as unknown) as Promise<T>;\n", "type Query = {\n  [index: string]: string | number | boolean;\n};\n\nexport type BuildUrlParams = {\n  pathname: string;\n  query: Query;\n};\n\nconst addQueryToUrl = (query: Query) => (url: URL) => {\n  Object.keys(query).forEach(queryKey =>\n    url.searchParams.set(queryKey, query[queryKey].toString()),\n  );\n};\n\nconst addPathnameToUrl = (pathname: string) => (url: URL) => {\n  // When there is no existing pathname, the value is `/`. Appending would give us a URL with two\n  // forward slashes. This is why we replace the value in that scenario.\n  if (url.pathname === '/') {\n    url.pathname = pathname;\n  } else {\n    url.pathname += pathname;\n  }\n};\n\nexport const buildUrl = ({ pathname, query }: BuildUrlParams) => (apiUrl: string) => {\n  const url = new URL(apiUrl);\n  addPathnameToUrl(pathname)(url);\n  addQueryToUrl(query)(url);\n  return url.toString();\n};\n\nconst getQueryFromSearchParams = (searchParams: URLSearchParams) => {\n  const query: Query = {};\n\n  searchParams.forEach((value, key) => {\n    query[key] = value;\n  });\n  return query;\n};\n\nexport const parseQueryAndPathname = (url: string) => {\n  const { pathname, searchParams } = new URL(url);\n\n  const query: Query = getQueryFromSearchParams(searchParams);\n\n  return { query, pathname: pathname === '/' ? undefined : pathname };\n};\n", "import { flow } from './fp';\nimport { ApiResponse, handleFetchResponse, HandleResponse } from './response';\nimport { isDefined, OmitStrict } from './typescript';\nimport { buildUrl, BuildUrlParams } from './url';\n\ntype FetchParams = Pick<RequestInit, 'method'>;\n/**\n * The params generated by the library\n */\ntype BaseRequestParams = BuildUrlParams &\n  FetchParams &\n  // `headers` is not part of FetchParams because we want to allow headers in the additional params as well\n  Pick<RequestInit, 'headers'>;\n\n/**\n * Additional fetch options provided by the user on a per-call basis\n */\nexport interface AdditionalFetchOptions extends OmitStrict<RequestInit, keyof FetchParams> {}\nexport type CompleteRequestParams = BaseRequestParams & AdditionalFetchOptions;\ntype HandleRequest<Args> = (\n  a: Args,\n  additionalFetchOptions?: AdditionalFetchOptions,\n) => CompleteRequestParams;\n\n/**\n * helper used to type-check the arguments, and add default params for all requests\n */\nexport const createRequestHandler = <Args>(\n  fn: (a: Args) => BaseRequestParams,\n): HandleRequest<Args> => (a, additionalFetchOptions = {}) => {\n  const { headers, query, ...baseReqParams } = fn(a);\n\n  return {\n    ...baseReqParams,\n    ...additionalFetchOptions,\n    query,\n    headers: {\n      ...headers,\n      ...additionalFetchOptions.headers,\n    },\n  };\n};\n\n/**\n * Initial parameters that apply to all calls\n */\nexport type InitParams = {\n  apiVersion?: string;\n  fetch?: typeof fetch;\n} & OmitStrict<RequestInit, 'method' | 'body'> &\n  ({ accessKey: string; apiUrl?: never } | { apiUrl: string; accessKey?: never });\n\ntype RequestGenerator<Args, ResponseType> = {\n  handleRequest: HandleRequest<Args>;\n  handleResponse: HandleResponse<ResponseType>;\n};\n\ntype Endpoint<PathnameParams, RequestArgs, ResponseType> = {\n  getPathname: (params: PathnameParams) => string;\n} & RequestGenerator<RequestArgs, ResponseType>;\nexport const makeEndpoint = <PathnameParams, RequestArgs, ResponseType>(\n  endpoint: Endpoint<PathnameParams, RequestArgs, ResponseType>,\n) => endpoint;\n\ntype GeneratedRequestFunction<Args, ResponseType> = (\n  ...a: Parameters<HandleRequest<Args>>\n) => Promise<ApiResponse<ResponseType>>;\n\ntype InitMakeRequest = (\n  args: InitParams,\n) => <Args, ResponseType>(\n  handlers: RequestGenerator<Args, ResponseType>,\n) => GeneratedRequestFunction<Args, ResponseType>;\n\nexport const initMakeRequest: InitMakeRequest = ({\n  accessKey,\n  apiVersion = 'v1',\n  apiUrl = 'https://api.unsplash.com',\n  headers: generalHeaders,\n  fetch: providedFetch,\n  ...generalFetchOptions\n}) => ({ handleResponse, handleRequest }) =>\n  flow(\n    handleRequest,\n    ({ pathname, query, method = 'GET', headers: endpointHeaders, body, signal }) => {\n      const url = buildUrl({ pathname, query })(apiUrl);\n\n      const fetchOptions: RequestInit = {\n        method,\n        headers: {\n          ...generalHeaders,\n          ...endpointHeaders,\n          'Accept-Version': apiVersion,\n          ...(isDefined(accessKey) ? { Authorization: `Client-ID ${accessKey}` } : {}),\n        },\n        body,\n        signal,\n        ...generalFetchOptions,\n      };\n\n      const fetchToUse = providedFetch ?? fetch;\n\n      return fetchToUse(url, fetchOptions).then(handleFetchResponse(handleResponse));\n    },\n  );\n", "import { DecodingError } from './errors';\nimport { HandleResponse, castResponse } from './response';\nimport { isDefined } from './typescript';\n\nconst TOTAL_RESPONSE_HEADER = 'x-total';\nconst getTotalFromApiFeedResponse = (response: Response) => {\n  const totalsStr = response.headers.get(TOTAL_RESPONSE_HEADER);\n  if (isDefined(totalsStr)) {\n    const total = parseInt(totalsStr);\n    if (Number.isInteger(total)) {\n      return total;\n    } else {\n      throw new DecodingError(`expected ${TOTAL_RESPONSE_HEADER} header to be valid integer.`);\n    }\n  } else {\n    throw new DecodingError(`expected ${TOTAL_RESPONSE_HEADER} header to exist.`);\n  }\n};\n\ntype FeedResponse<T> = {\n  results: T[];\n  total: number;\n};\n\nexport const handleFeedResponse = <T>(): HandleResponse<FeedResponse<T>> => ({ response }) =>\n  castResponse<T[]>()({ response }).then(results => ({\n    results,\n    total: getTotalFromApiFeedResponse(response),\n  }));\n", "import { PaginationParams } from '../types/request';\nimport { compactDefined } from './fp';\nimport { isDefined } from './typescript';\n\nexport const getCollections = (collectionIds?: string[]) =>\n  isDefined(collectionIds) ? { collections: collectionIds.join() } : {};\n\nexport const getTopics = (topicIds?: string[]) =>\n  isDefined(topicIds) ? { topics: topicIds.join() } : {};\n\nexport const getFeedParams = ({ page, perPage, orderBy }: PaginationParams) =>\n  compactDefined({\n    per_page: perPage,\n    order_by: orderBy,\n    page,\n  });\n", "import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler, makeEndpoint } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\n\ntype CollectionId = {\n  collectionId: string;\n};\n\nconst COLLECTIONS_PATH_PREFIX = '/collections';\n\nexport const getPhotos = (() => {\n  const getPathname = ({ collectionId }: CollectionId) =>\n    `${COLLECTIONS_PATH_PREFIX}/${collectionId}/photos`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(\n      ({\n        collectionId,\n        orientation,\n        ...paginationParams\n      }: CollectionId & PaginationParams & OrientationParam) => ({\n        pathname: getPathname({ collectionId }),\n        query: compactDefined({ ...Query.getFeedParams(paginationParams), orientation }),\n      }),\n    ),\n    handleResponse: handleFeedResponse<any>(),\n  });\n})();\n\nexport const get = (() => {\n  const getPathname = ({ collectionId }: CollectionId) =>\n    `${COLLECTIONS_PATH_PREFIX}/${collectionId}`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(({ collectionId }: CollectionId) => ({\n      pathname: getPathname({ collectionId }),\n      query: {},\n    })),\n    handleResponse: castResponse<any>(),\n  });\n})();\n\nexport const list = (() => {\n  const getPathname = () => COLLECTIONS_PATH_PREFIX;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(\n      (paginationParams: Pick<PaginationParams, 'page' | 'perPage'> = {}) => ({\n        pathname: getPathname(),\n        query: Query.getFeedParams(paginationParams),\n      }),\n    ),\n    handleResponse: handleFeedResponse<any>(),\n  });\n})();\n\nexport const getRelated = (() => {\n  const getPathname = ({ collectionId }: CollectionId) =>\n    `${COLLECTIONS_PATH_PREFIX}/${collectionId}/related`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(({ collectionId }: CollectionId) => ({\n      pathname: getPathname({ collectionId }),\n      query: {},\n    })),\n    handleResponse: castResponse<any>(),\n  });\n})();\n", "import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler, makeEndpoint } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { isDefined } from '../../helpers/typescript';\nimport { parseQueryAndPathname } from '../../helpers/url';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport * as Photo from './types';\n\ntype PhotoId = {\n  photoId: string;\n};\n\nconst PHOTOS_PATH_PREFIX = '/photos';\n\nexport const list = (() => {\n  const getPathname = () => PHOTOS_PATH_PREFIX;\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: (_params?: void) => getPathname(),\n    handleRequest: createRequestHandler((feedParams: PaginationParams = {}) => ({\n      pathname: PHOTOS_PATH_PREFIX,\n      query: compactDefined(Query.getFeedParams(feedParams)),\n    })),\n    handleResponse: handleFeedResponse<Photo.Basic>(),\n  });\n})();\n\nexport const get = (() => {\n  const getPathname = ({ photoId }: PhotoId) => `${PHOTOS_PATH_PREFIX}/${photoId}`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(({ photoId }: PhotoId) => ({\n      pathname: getPathname({ photoId }),\n      query: {},\n    })),\n    handleResponse: castResponse<Photo.Full>(),\n  });\n})();\n\nexport const getStats = (() => {\n  const getPathname = ({ photoId }: PhotoId) => `${PHOTOS_PATH_PREFIX}/${photoId}/statistics`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(({ photoId }: PhotoId) => ({\n      pathname: getPathname({ photoId }),\n      query: {},\n    })),\n    handleResponse: castResponse<Photo.Stats>(),\n  });\n})();\n\nexport type RandomParams = {\n  collectionIds?: string[];\n  topicIds?: string[];\n  featured?: boolean;\n  username?: string;\n  query?: string;\n  contentFilter?: 'low' | 'high';\n  count?: number;\n} & OrientationParam;\n\nexport const getRandom = (() => {\n  const getPathname = () => `${PHOTOS_PATH_PREFIX}/random`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(\n      ({ collectionIds, contentFilter, topicIds, ...queryParams }: RandomParams = {}) => ({\n        pathname: getPathname(),\n        query: compactDefined({\n          ...queryParams,\n          content_filter: contentFilter,\n          ...Query.getCollections(collectionIds),\n          ...Query.getTopics(topicIds),\n        }),\n        headers: {\n          /**\n           * Avoid response caching\n           */\n          'cache-control': 'no-cache',\n        },\n      }),\n    ),\n    handleResponse: castResponse<\n      // An array when the `count` query parameter is used.\n      Photo.Random | Photo.Random[]\n    >(),\n  });\n})();\n\nexport const trackDownload = {\n  handleRequest: createRequestHandler(({ downloadLocation }: { downloadLocation: string }) => {\n    const { pathname, query } = parseQueryAndPathname(downloadLocation);\n\n    if (!isDefined(pathname)) {\n      throw new Error('Could not parse pathname from url.');\n    }\n    return { pathname, query: compactDefined(query) };\n  }),\n  handleResponse: castResponse<{ url: string }>(),\n};\n", "import { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler, makeEndpoint } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams, Plus } from '../../types/request';\nimport { ColorId, ContentFilter, Language, SearchOrderBy } from './types/request';\nimport * as SearchResponse from './types/response';\n\nexport type SearchParams = {\n  query: string;\n} & Pick<PaginationParams, 'page' | 'perPage'>;\n\nconst SEARCH_PATH_PREFIX = `/search`;\n\ntype SearchPhotosParams = SearchParams &\n  OrientationParam & {\n    /**\n     * API defaults to `\"relevant\"` if no value is provided\n     */\n    orderBy?: SearchOrderBy;\n    color?: ColorId;\n    plus?: Plus;\n    /**\n     * API defaults to `en` (English) if no value is provided\n     */\n    lang?: Language;\n    /**\n     * API defaults to `\"low\"` if no value is provided\n     */\n    contentFilter?: ContentFilter;\n    collectionIds?: string[];\n  };\n\nexport const getPhotos = (() => {\n  const getPathname = () => `${SEARCH_PATH_PREFIX}/photos`;\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: (_params?: void) => getPathname(),\n    handleRequest: createRequestHandler(\n      ({\n        query,\n        page,\n        perPage,\n        orderBy,\n        collectionIds,\n        lang,\n        contentFilter,\n        ...filters\n      }: SearchPhotosParams) => ({\n        pathname: getPathname(),\n        query: compactDefined({\n          query,\n          content_filter: contentFilter,\n          lang,\n          order_by: orderBy,\n          ...Query.getFeedParams({ page, perPage }),\n          ...Query.getCollections(collectionIds),\n          ...filters,\n        }),\n      }),\n    ),\n    handleResponse: castResponse<SearchResponse.Photos>(),\n  });\n})();\n\nexport const getCollections = (() => {\n  const getPathname = () => `${SEARCH_PATH_PREFIX}/collections`;\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: (_params?: void) => getPathname(),\n    handleRequest: createRequestHandler(({ query, ...paginationParams }: SearchParams) => ({\n      pathname: getPathname(),\n      query: { query, ...Query.getFeedParams(paginationParams) },\n    })),\n    handleResponse: castResponse<SearchResponse.Collections>(),\n  });\n})();\n\nexport const getUsers = (() => {\n  const getPathname = () => `${SEARCH_PATH_PREFIX}/users`;\n  return makeEndpoint({\n    // Wrapper uses type trick to allow 0 args\n    getPathname: (_params?: void) => getPathname(),\n    handleRequest: createRequestHandler(({ query, ...paginationParams }: SearchParams) => ({\n      pathname: getPathname(),\n      query: { query, ...Query.getFeedParams(paginationParams) },\n    })),\n    handleResponse: castResponse<SearchResponse.Users>(),\n  });\n})();\n", "import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler, makeEndpoint } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport * as User from './types';\nimport * as Photo from '../photos/types';\nimport * as Collection from '../collections/types';\n\ntype Username = {\n  username: string;\n};\n\nconst USERS_PATH_PREFIX = '/users';\n\nexport const get = (() => {\n  const getPathname = ({ username }: Username) => `${USERS_PATH_PREFIX}/${username}`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(({ username }: Username) => ({\n      pathname: getPathname({ username }),\n      query: {},\n    })),\n    handleResponse: castResponse<User.Full>(),\n  });\n})();\n\nexport const getPhotos = (() => {\n  const getPathname = ({ username }: Username) => `${USERS_PATH_PREFIX}/${username}/photos`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(\n      ({\n        username,\n        stats,\n        orientation,\n        ...paginationParams\n      }: {\n        stats?: boolean;\n      } & OrientationParam &\n        Username &\n        PaginationParams) => ({\n        pathname: getPathname({ username }),\n        query: compactDefined({\n          ...Query.getFeedParams(paginationParams),\n          orientation,\n          stats,\n        }),\n      }),\n    ),\n    handleResponse: handleFeedResponse<Photo.Basic>(),\n  });\n})();\n\nexport const getLikes = (() => {\n  const getPathname = ({ username }: Username) => `${USERS_PATH_PREFIX}/${username}/likes`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(\n      ({\n        username,\n        orientation,\n        ...paginationParams\n      }: OrientationParam & Username & PaginationParams) => ({\n        pathname: getPathname({ username }),\n        query: compactDefined({\n          ...Query.getFeedParams(paginationParams),\n          orientation,\n        }),\n      }),\n    ),\n    handleResponse: handleFeedResponse<Photo.Basic>(),\n  });\n})();\nexport const getCollections = (() => {\n  const getPathname = ({ username }: Username) => `${USERS_PATH_PREFIX}/${username}/collections`;\n  return makeEndpoint({\n    getPathname,\n    handleRequest: createRequestHandler(\n      ({ username, ...paginationParams }: Username & PaginationParams) => ({\n        pathname: getPathname({ username }),\n        query: Query.getFeedParams(paginationParams),\n      }),\n    ),\n    handleResponse: handleFeedResponse<Collection.Basic>(),\n  });\n})();\n", "import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined, flow } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { makeEndpoint } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OmitStrict } from '../../helpers/typescript';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport * as Photo from '../photos/types';\nimport * as Topic from './types';\n\nexport type TopicIdOrSlug = {\n  topicIdOrSlug: string;\n};\n\nconst BASE_TOPIC_PATH = '/topics';\nconst getTopicPath = ({ topicIdOrSlug }: TopicIdOrSlug) => `${BASE_TOPIC_PATH}/${topicIdOrSlug}`;\n\nexport type TopicOrderBy = 'latest' | 'oldest' | 'position' | 'featured';\n\nexport const list = makeEndpoint({\n  getPathname: getTopicPath,\n  handleRequest: ({\n    page,\n    perPage,\n    orderBy,\n    topicIdsOrSlugs,\n  }: OmitStrict<PaginationParams, 'orderBy'> & {\n    /**\n     * default: `position`\n     */\n    orderBy?: TopicOrderBy;\n    topicIdsOrSlugs?: string[];\n  }) => ({\n    pathname: BASE_TOPIC_PATH,\n    query: compactDefined({\n      ...Query.getFeedParams({ page, perPage }),\n      ids: topicIdsOrSlugs?.join(','),\n      order_by: orderBy,\n    }),\n  }),\n  handleResponse: handleFeedResponse<Topic.Basic>(),\n});\n\nexport const get = makeEndpoint({\n  getPathname: getTopicPath,\n  handleRequest: ({ topicIdOrSlug }: TopicIdOrSlug) => ({\n    pathname: getTopicPath({ topicIdOrSlug }),\n    query: {},\n  }),\n  handleResponse: castResponse<Topic.Full>(),\n});\n\nexport const getPhotos = (() => {\n  const getPathname = flow(getTopicPath, topicPath => `${topicPath}/photos`);\n  return makeEndpoint({\n    getPathname,\n    handleRequest: ({\n      topicIdOrSlug,\n      orientation,\n      ...feedParams\n    }: TopicIdOrSlug & PaginationParams & OrientationParam) => ({\n      pathname: getPathname({ topicIdOrSlug }),\n      query: compactDefined({\n        ...Query.getFeedParams(feedParams),\n        orientation,\n      }),\n    }),\n    handleResponse: handleFeedResponse<Photo.Basic>(),\n  });\n})();\n", "export const trackNonHotLinkedPhotoView = ({ appId }: { appId: string }) => ({\n  photoId,\n}: {\n  photoId: string | string[];\n}) => {\n  const ids = !Array.isArray(photoId) ? [photoId] : photoId;\n\n  if (ids.length > 20) {\n    throw new Error(\n      'You cannot track more than 20 photos at once. Please try again with fewer photos.',\n    );\n  }\n\n  return fetch(`views.unsplash.com/v?photo_id=${ids.join()}&app_id=${appId}`);\n};\n", "export type SearchOrderBy = 'relevant' | 'latest' | 'editorial';\n\nexport type ColorId =\n  | 'white'\n  | 'black'\n  | 'yellow'\n  | 'orange'\n  | 'red'\n  | 'purple'\n  | 'magenta'\n  | 'green'\n  | 'teal'\n  | 'blue'\n  | 'black_and_white';\n\nexport type ContentFilter = 'high' | 'low';\n\nexport enum Language {\n  Afrikaans = 'af',\n  Amharic = 'am',\n  Arabic = 'ar',\n  Azerbaijani = 'az',\n  Belarusian = 'be',\n  Bulgarian = 'bg',\n  Bengali = 'bn',\n  Bosnian = 'bs',\n  Catalan = 'ca',\n  Cebuano = 'ceb',\n  Corsican = 'co',\n  Czech = 'cs',\n  Welsh = 'cy',\n  Danish = 'da',\n  German = 'de',\n  Greek = 'el',\n  English = 'en',\n  Esperanto = 'eo',\n  Spanish = 'es',\n  Estonian = 'et',\n  Basque = 'eu',\n  Persian = 'fa',\n  Finnish = 'fi',\n  French = 'fr',\n  Frisian = 'fy',\n  Irish = 'ga',\n  ScotsGaelic = 'gd',\n  Galician = 'gl',\n  Gujarati = 'gu',\n  Hausa = 'ha',\n  Hawaiian = 'haw',\n  Hindi = 'hi',\n  Hmong = 'hmn',\n  Croatian = 'hr',\n  HaitianCreole = 'ht',\n  Hungarian = 'hu',\n  Armenian = 'hy',\n  Indonesian = 'id',\n  Igbo = 'ig',\n  Icelandic = 'is',\n  Italian = 'it',\n  Hebrew = 'iw',\n  Japanese = 'ja',\n  Javanese = 'jw',\n  Georgian = 'ka',\n  Kazakh = 'kk',\n  Khmer = 'km',\n  Kannada = 'kn',\n  Korean = 'ko',\n  Kurdish = 'ku',\n  Kyrgyz = 'ky',\n  Latin = 'la',\n  Luxembourgish = 'lb',\n  Lao = 'lo',\n  Lithuanian = 'lt',\n  Latvian = 'lv',\n  Malagasy = 'mg',\n  Maori = 'mi',\n  Macedonian = 'mk',\n  Malayalam = 'ml',\n  Mongolian = 'mn',\n  Marathi = 'mr',\n  Malay = 'ms',\n  Maltese = 'mt',\n  Myanmar = 'my',\n  Nepali = 'ne',\n  Dutch = 'nl',\n  Norwegian = 'no',\n  Nyanja = 'ny',\n  Oriya = 'or',\n  Punjabi = 'pa',\n  Polish = 'pl',\n  Pashto = 'ps',\n  Portuguese = 'pt',\n  Romanian = 'ro',\n  Russian = 'ru',\n  Kinyarwanda = 'rw',\n  Sindhi = 'sd',\n  Sinhala = 'si',\n  Slovak = 'sk',\n  Slovenian = 'sl',\n  Samoan = 'sm',\n  Shona = 'sn',\n  Somali = 'so',\n  Albanian = 'sq',\n  Serbian = 'sr',\n  Sesotho = 'st',\n  Sundanese = 'su',\n  Swedish = 'sv',\n  Swahili = 'sw',\n  Tamil = 'ta',\n  Telugu = 'te',\n  Tajik = 'tg',\n  Thai = 'th',\n  Turkmen = 'tk',\n  Filipino = 'tl',\n  Turkish = 'tr',\n  Tatar = 'tt',\n  Uighur = 'ug',\n  Ukrainian = 'uk',\n  Urdu = 'ur',\n  Uzbek = 'uz',\n  Vietnamese = 'vi',\n  Xhosa = 'xh',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  ChineseSimplified = 'zh',\n  ChineseTraditional = 'zh-TW',\n  Zulu = 'zu',\n}\n", "export enum OrderBy {\n  LATEST = 'latest',\n  POPULAR = 'popular',\n  VIEWS = 'views',\n  DOWNLOADS = 'downloads',\n  OLDEST = 'oldest',\n}\nexport type Orientation = 'landscape' | 'portrait' | 'squarish';\nexport type OrientationParam = {\n  orientation?: Orientation;\n};\nexport type Plus = 'mixed' | 'only' | 'none';\n\nexport type PaginationParams = {\n  /**\n   * API defaults to `10` if no value is provided\n   */\n  perPage?: number;\n  /**\n   * API defaults to `1` if no value is provided\n   */\n  page?: number;\n  /**\n   * API defaults to `\"latest\"` if no value is provided\n   */\n  orderBy?: OrderBy;\n};\n", "import { flow } from './helpers/fp';\nimport { initMakeRequest } from './helpers/request';\nimport * as collections from './methods/collections';\nimport * as photos from './methods/photos';\nimport * as search from './methods/search';\nimport * as users from './methods/users';\nimport * as topics from './methods/topics';\n\nimport * as _internals from './internals';\n\nexport const createApi = flow(initMakeRequest, makeRequest => ({\n  photos: {\n    get: makeRequest(photos.get),\n    list: makeRequest(photos.list),\n    getStats: makeRequest(photos.getStats),\n    getRandom: makeRequest(photos.getRandom),\n    trackDownload: makeRequest(photos.trackDownload),\n  },\n  users: {\n    getPhotos: makeRequest(users.getPhotos),\n    getCollections: makeRequest(users.getCollections),\n    getLikes: makeRequest(users.getLikes),\n    get: makeRequest(users.get),\n  },\n  search: {\n    getCollections: makeRequest(search.getCollections),\n    getPhotos: makeRequest(search.getPhotos),\n    getUsers: makeRequest(search.getUsers),\n  },\n  collections: {\n    getPhotos: makeRequest(collections.getPhotos),\n    get: makeRequest(collections.get),\n    list: makeRequest(collections.list),\n    getRelated: makeRequest(collections.getRelated),\n  },\n  topics: {\n    list: makeRequest(topics.list),\n    get: makeRequest(topics.get),\n    getPhotos: makeRequest(topics.getPhotos),\n  },\n}));\n\nexport { Language, ColorId, ContentFilter, SearchOrderBy } from './methods/search/types/request';\nexport { OrderBy, Orientation, Plus } from './types/request';\nexport { _internals };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAsBA,QAAI,eAAe;AACnB,QAAI,cAAc;AAClB,QAAI,eAAe;AAQnB,QAAI,cAAc;AAKlB,QAAI,eAAe;AASnB,QAAI,cAAc;AAOlB,YAAQ,SAAS;AACjB,YAAQ,QAAQA;AAUhB,aAAS,OAAQ,KAAK;AACpB,UAAI,CAAC,OAAO,OAAO,QAAQ,UAAU;AACnC,cAAM,IAAI,UAAU,0BAA0B;AAAA,MAChD;AAEA,UAAI,aAAa,IAAI;AACrB,UAAI,OAAO,IAAI;AAEf,UAAI,CAAC,QAAQ,CAAC,YAAY,KAAK,IAAI,GAAG;AACpC,cAAM,IAAI,UAAU,cAAc;AAAA,MACpC;AAEA,UAAI,SAAS;AAGb,UAAI,cAAc,OAAO,eAAe,UAAU;AAChD,YAAI;AACJ,YAAI,SAAS,OAAO,KAAK,UAAU,EAAE,KAAK;AAE1C,iBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,kBAAQ,OAAO,CAAC;AAEhB,cAAI,CAAC,aAAa,KAAK,KAAK,GAAG;AAC7B,kBAAM,IAAI,UAAU,wBAAwB;AAAA,UAC9C;AAEA,oBAAU,OAAO,QAAQ,MAAM,QAAQ,WAAW,KAAK,CAAC;AAAA,QAC1D;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAUA,aAASA,OAAO,QAAQ;AACtB,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,UAAU,6BAA6B;AAAA,MACnD;AAGA,UAAI,SAAS,OAAO,WAAW,WAC3B,eAAe,MAAM,IACrB;AAEJ,UAAI,OAAO,WAAW,UAAU;AAC9B,cAAM,IAAI,UAAU,4CAA4C;AAAA,MAClE;AAEA,UAAIC,SAAQ,OAAO,QAAQ,GAAG;AAC9B,UAAI,OAAOA,WAAU,KACjB,OAAO,MAAM,GAAGA,MAAK,EAAE,KAAK,IAC5B,OAAO,KAAK;AAEhB,UAAI,CAAC,YAAY,KAAK,IAAI,GAAG;AAC3B,cAAM,IAAI,UAAU,oBAAoB;AAAA,MAC1C;AAEA,UAAI,MAAM,IAAI,YAAY,KAAK,YAAY,CAAC;AAG5C,UAAIA,WAAU,IAAI;AAChB,YAAI;AACJ,YAAI;AACJ,YAAI;AAEJ,qBAAa,YAAYA;AAEzB,eAAQ,QAAQ,aAAa,KAAK,MAAM,GAAI;AAC1C,cAAI,MAAM,UAAUA,QAAO;AACzB,kBAAM,IAAI,UAAU,0BAA0B;AAAA,UAChD;AAEA,UAAAA,UAAS,MAAM,CAAC,EAAE;AAClB,gBAAM,MAAM,CAAC,EAAE,YAAY;AAC3B,kBAAQ,MAAM,CAAC;AAEf,cAAI,MAAM,WAAW,CAAC,MAAM,IAAc;AAExC,oBAAQ,MAAM,MAAM,GAAG,EAAE;AAGzB,gBAAI,MAAM,QAAQ,IAAI,MAAM,IAAI;AAC9B,sBAAQ,MAAM,QAAQ,aAAa,IAAI;AAAA,YACzC;AAAA,UACF;AAEA,cAAI,WAAW,GAAG,IAAI;AAAA,QACxB;AAEA,YAAIA,WAAU,OAAO,QAAQ;AAC3B,gBAAM,IAAI,UAAU,0BAA0B;AAAA,QAChD;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAUA,aAAS,eAAgB,KAAK;AAC5B,UAAI;AAEJ,UAAI,OAAO,IAAI,cAAc,YAAY;AAEvC,iBAAS,IAAI,UAAU,cAAc;AAAA,MACvC,WAAW,OAAO,IAAI,YAAY,UAAU;AAE1C,iBAAS,IAAI,WAAW,IAAI,QAAQ,cAAc;AAAA,MACpD;AAEA,UAAI,OAAO,WAAW,UAAU;AAC9B,cAAM,IAAI,UAAU,4CAA4C;AAAA,MAClE;AAEA,aAAO;AAAA,IACT;AAUA,aAAS,QAAS,KAAK;AACrB,UAAI,MAAM,OAAO,GAAG;AAGpB,UAAI,aAAa,KAAK,GAAG,GAAG;AAC1B,eAAO;AAAA,MACT;AAEA,UAAI,IAAI,SAAS,KAAK,CAAC,YAAY,KAAK,GAAG,GAAG;AAC5C,cAAM,IAAI,UAAU,yBAAyB;AAAA,MAC/C;AAEA,aAAO,MAAM,IAAI,QAAQ,cAAc,MAAM,IAAI;AAAA,IACnD;AAMA,aAAS,YAAa,MAAM;AAC1B,WAAK,aAAa,uBAAO,OAAO,IAAI;AACpC,WAAK,OAAO;AAAA,IACd;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3NO,IAAMC,gBAAgBC,cAC3B,SAACC,OAAD;AAAA,SAAuC,OAAOA,UAAU,WAAWA,QAAQ;AAA3E,CADwC;AAcnC,IAAMC,YAAY,SAAZA,WAAgBC,GAAJ;AAAA,SAAwCA,MAAM,QAAQA,MAAMC;AAA5D;SAKTJ,cAA8BK,MAAAA;AAC5C,SAAO,SAACC,GAAD;AAAA,WAAkBJ,UAAUG,KAAKC,CAAD,CAAL;EAA3B;AACR;AAEM,IAAMC,uBAAuB,SAAvBA,sBAA2BD,GAAJ;AAAA,SAAsCA,EAAEE,SAAS;AAAjD;ACvB7B,IAAMC,iBAAiB,SAAjBA,gBAAqBC,KAAJ;AAAA,SAC5BC,OAAOC,KAAKF,GAAZ,EAAiBG,OAA0B,SAACC,KAAKC,KAAN;;AACzC,QAAMd,QAAQS,IAAIK,GAAD;AACjB,WAAA,SAAA,CAAA,GACKD,KACCZ,UAAUD,KAAD,KAAT,OAAA,CAAA,GAAA,KAAsBc,GAAtB,IAA4Bd,OAA5B,QAAsC,CAAA,CAF5C;EAID,GAAE,CAAA,CANH;AAD4B;AAuB9B,SAAgBe,OAAAA;oCAAQC,MAAAA,IAAAA,MAAAA,IAAAA,GAAAA,OAAAA,GAAAA,OAAAA,MAAAA,QAAAA;AAAAA,QAAAA,IAAAA,IAAAA,UAAAA,IAAAA;;AACtB,MAAMC,MAAMD,IAAIT,SAAS;AACzB,SAAO,WAAA;uCAAuBL,IAAAA,IAAAA,MAAAA,KAAAA,GAAAA,QAAAA,GAAAA,QAAAA,OAAAA,SAAAA;AAAAA,QAAAA,KAAAA,IAAAA,UAAAA,KAAAA;;AAC5B,QAAIgB,IAAIF,IAAI,CAAD,EAAIG,MAAM,MAAMjB,CAAnB;AACR,aAASkB,IAAI,GAAGA,KAAKH,KAAKG,KAAK;AAC7BF,UAAIF,IAAII,CAAD,EAAIC,KAAK,MAAMH,CAAlB;IACL;AACD,WAAOA;EACR;AACF;ACvBD,IAAMI,gBAAgBvB,cACpB,SAACwB,UAAD;AAAA,SACEtB,UAAUsB,QAAD,KAAc,OAAOA,aAAa,YAAY,CAACC,MAAMC,QAAQF,QAAd,IACpDA,WACA;AAHN,CADiC;AAOnC,IAAMG,gBAAgB3B,cACpB,SAAC4B,QAAD;AAAA,SACEH,MAAMC,QAAQE,MAAd,KAAyBA,OAAOC,MAAM9B,aAAb,KAA+BQ,qBAAqBqB,MAAD,IACxEA,SACA;AAHN,CADiC;AAOnC,IAAME,kBAAkB9B,cACtB,SAACwB,UAAD;AAAA,SACED,cAAcC,QAAD,KAAc,YAAYA,YAAYG,cAAcH,SAASI,MAAV,IAC5D;IAAEA,QAAQJ,SAASI;EAAnB,IACA;AAHN,CADmC;AAO9B,IAAMG,2BAA2B,SAA3BA,0BACXC,cADsC;AAGtC,MAAIF,gBAAgBE,YAAD,GAAgB;AACjC,WAAO;MAAEJ,QAAQI,aAAaJ;MAAQK,QAAQ;IAAvC;EACR,OAAM;AACL,WAAO;MACLL,QAAQ,CACN,gGADM;MAGRK,QAAQ;IAJH;EAMR;AACF;AAED,IAAaC,gBACX,SAAAA,eAAqBC,SAArB;AAAqB,OAAA,UAAAA;AAAmB;AC/C1C,IAAMC,+BAA+B;AACrC,IAAMC,oBAAoB;AAC1B,IAAMC,sBAAsB,SAAtBA,qBAAuBd,UAAD;AAC1B,MAAMe,oBAAoBf,SAASgB,QAAQC,IAAIL,4BAArB;AAE1B,SACElC,UAAUqC,iBAAD,SACTG,2BAAyBH,iBAAzB,EAA4CI,SAASN;AAExD;AAKM,IAAMO,kBAAkB,SAAlBA,iBAAmBpB,UAAD;AAC7B,MAAIc,oBAAoBd,QAAD,GAAY;AACjC,WAAOA,SAASqB,KAAT,EAAA,OAAA,EAAsB,SAAAC,MAAI;AAC/B,YAAM,IAAIZ,cAAc,gCAAlB;IACP,CAFM;EAGR,OAAM;AACL,UAAM,IAAIA,cAAc,qCAAlB;EACP;AACF;ACJM,IAAMa,sBAAsB,SAAtBA,qBAAqCC,gBAAf;AAAA,SAAgE,SACjGxB,UADiG;AAAA,YAGhGA,SAASyB,KACND,eAAe;MAAExB;IAAF,CAAD,EAAe0B,KAC3B,SAACC,iBAAD;AAAA,aAAiD;QAC/CR,MAAM;QACNS,QAAQ5B,SAAS4B;QACjB5B,UAAU2B;QACVE,kBAAkB7B;MAJ6B;IAAjD,CADF,IAQAoB,gBAAgBpB,QAAD,EAAW0B,KACxB,SAAClB,cAAD;AAAA,aAAA,SAAA;QACEW,MAAM;QACNS,QAAQ5B,SAAS4B;MAFnB,GAGKrB,yBAAyBC,YAAD,GAH7B;QAIEqB,kBAAkB7B;MAJpB,CAAA;IAAA,CADF,GATJ,OAAA,EAiBQ,SAAA8B,OAAK;AAUX,UAAIA,iBAAiBpB,eAAe;AAClC,eAAO;UACLS,MAAM;UACNV,QAAQ;UACRmB,QAAQ5B,SAAS4B;UACjBC,kBAAkB7B;UAClBI,QAAQ,CAAC0B,MAAMnB,OAAP;QALH;MAOR,OAAM;AACL,cAAMmB;MACP;IACF,CAtCD;EAHiG;AAAhE;AA2C5B,IAAMC,eAAe,SAAfA,gBAAe;AAAA,SAA4B,SAAA,MAAA;AAAA,QAAG/B,WAAH,KAAGA;AAAH,WACrDoB,gBAAgBpB,QAAD;EADsC;AAA5B;ACxD5B,IAAMgC,gBAAgB,SAAhBA,eAAiBC,OAAD;AAAA,SAAkB,SAACC,KAAD;AACtC/C,WAAOC,KAAK6C,KAAZ,EAAmBE,QAAQ,SAAAC,UAAQ;AAAA,aACjCF,IAAIG,aAAaC,IAAIF,UAAUH,MAAMG,QAAD,EAAWG,SAAhB,CAA/B;IADiC,CAAnC;EAGD;AAJqB;AAMtB,IAAMC,mBAAmB,SAAnBA,kBAAoBC,UAAD;AAAA,SAAsB,SAACP,KAAD;AAG7C,QAAIA,IAAIO,aAAa,KAAK;AACxBP,UAAIO,WAAWA;IAChB,OAAM;AACLP,UAAIO,YAAYA;IACjB;EACF;AARwB;AAUlB,IAAMC,WAAW,SAAXA,UAAW,MAAA;AAAA,MAAGD,WAAH,KAAGA,UAAUR,QAAb,KAAaA;AAAb,SAAyC,SAACU,QAAD;AAC/D,QAAMT,MAAM,IAAIU,IAAID,MAAR;AACZH,qBAAiBC,QAAD,EAAWP,GAA3B;AACAF,kBAAcC,KAAD,EAAQC,GAArB;AACA,WAAOA,IAAIK,SAAJ;EACR;AALuB;AAOxB,IAAMM,2BAA2B,SAA3BA,0BAA4BR,cAAD;AAC/B,MAAMJ,QAAe,CAAA;AAErBI,eAAaF,QAAQ,SAAC1D,OAAOc,KAAR;AACnB0C,UAAM1C,GAAD,IAAQd;EACd,CAFD;AAGA,SAAOwD;AACR;AAEM,IAAMa,wBAAwB,SAAxBA,uBAAyBZ,KAAD;aACA,IAAIU,IAAIV,GAAR,GAA3BO,WAAAA,KAAAA,UAAUJ,eAAAA,KAAAA;AAElB,MAAMJ,QAAeY,yBAAyBR,YAAD;AAE7C,SAAO;IAAEJ;IAAOQ,UAAUA,aAAa,MAAM7D,SAAY6D;EAAlD;AACR;ACpBM,IAAMM,uBAAuB,SAAvBA,sBACXC,IADkC;AAAA,SAEV,SAAClE,GAAGmE,wBAAJ;QAAIA,2BAAAA,QAAAA;AAAAA,+BAAyB,CAAA;;cACRD,GAAGlE,CAAD,GAAvCkC,UAAAA,IAAAA,SAASiB,QAAAA,IAAAA,OAAUiB,gBAAAA,8BAAAA,KAAAA,CAAAA,WAAAA,OAAAA,CAAAA;AAE3B,WAAA,SAAA,CAAA,GACKA,eACAD,wBAFL;MAGEhB;MACAjB,SAAO,SAAA,CAAA,GACFA,SACAiC,uBAAuBjC,OAFrB;IAJT,CAAA;EASD;AAdmC;AAiC7B,IAAMmC,eAAe,SAAfA,cACXC,UAD0B;AAAA,SAEvBA;AAFuB;AAcrB,IAAMC,kBAAmC,SAAnCA,iBAAmC,MAAA;AAAA,MAC9CC,YAD8C,KAC9CA,WAD8C,kBAAA,KAE9CC,YAAAA,aAF8C,oBAAA,SAEjC,OAFiC,iBAAA,cAAA,KAG9CZ,QAAAA,SAH8C,gBAAA,SAGrC,6BAHqC,aAIrCa,iBAJqC,KAI9CxC,SACOyC,gBALuC,KAK9CC,OACGC,sBAN2C,8BAAA,MAAA,CAAA,aAAA,cAAA,UAAA,WAAA,OAAA,CAAA;AAAA,SAO1C,SAAA,OAAA;AAAA,QAAGnC,iBAAH,MAAGA,gBAAgBoC,iBAAnB,MAAmBA;AAAnB,WACJpE,KACEoE,gBACA,SAAA,OAAA;UAAGnB,WAAAA,MAAAA,UAAUR,QAAAA,MAAAA,4BAAO4B,QAAAA,SAAAA,iBAAAA,SAAS,QAAA,cAAgBC,kBAAAA,MAAT9C,SAA0B+C,OAAAA,MAAAA,MAAMC,SAAAA,MAAAA;AAClE,UAAM9B,MAAMQ,SAAS;QAAED;QAAUR;MAAZ,CAAD,EAAsBU,MAA9B;AAEZ,UAAMsB,eAAY,SAAA;QAChBJ;QACA7C,SAAO,SAAA,CAAA,GACFwC,gBACAM,iBAFE;UAGL,kBAAkBP;QAHb,GAID7E,UAAU4E,SAAD,IAAc;UAAEY,eAAa,eAAeZ;QAA9B,IAA8C,CAAA,CAJpE;QAMPS;QACAC;MATgB,GAUbL,mBAVa;AAalB,UAAMQ,aAAaV,iBAAH,OAAGA,gBAAiBC;AAEpC,aAAOS,WAAWjC,KAAK+B,YAAN,EAAoBvC,KAAKH,oBAAoBC,cAAD,CAAtD;IACR,CArBC;EADA;AAP0C;ACtEhD,IAAM4C,wBAAwB;AAC9B,IAAMC,8BAA8B,SAA9BA,6BAA+BrE,UAAD;AAClC,MAAMsE,YAAYtE,SAASgB,QAAQC,IAAImD,qBAArB;AAClB,MAAI1F,UAAU4F,SAAD,GAAa;AACxB,QAAMC,QAAQC,SAASF,SAAD;AACtB,QAAIG,OAAOC,UAAUH,KAAjB,GAAyB;AAC3B,aAAOA;IACR,OAAM;AACL,YAAM,IAAI7D,cAAJ,cAA8B0D,wBAA9B,8BAAA;IACP;EACF,OAAM;AACL,UAAM,IAAI1D,cAAJ,cAA8B0D,wBAA9B,mBAAA;EACP;AACF;AAOM,IAAMO,qBAAqB,SAArBA,sBAAqB;AAAA,SAA0C,SAAA,MAAA;AAAA,QAAG3E,WAAH,KAAGA;AAAH,WAC1E+B,aAAY,EAAQ;MAAE/B;IAAF,CAAR,EAAsB0B,KAAK,SAAAkD,SAAO;AAAA,aAAK;QACjDA;QACAL,OAAOF,4BAA4BrE,QAAD;MAFe;IAAL,CAA9C;EAD0E;AAA1C;ACpB3B,IAAM6E,iBAAiB,SAAjBA,gBAAkBC,eAAD;AAAA,SAC5BpG,UAAUoG,aAAD,IAAkB;IAAEC,aAAaD,cAAcE,KAAd;EAAf,IAAwC,CAAA;AADvC;AAGvB,IAAMC,YAAY,SAAZA,WAAaC,UAAD;AAAA,SACvBxG,UAAUwG,QAAD,IAAa;IAAEC,QAAQD,SAASF,KAAT;EAAV,IAA8B,CAAA;AAD7B;AAGlB,IAAMI,gBAAgB,SAAhBA,eAAgB,MAAA;AAAA,MAAGC,OAAH,KAAGA,MAAMC,UAAT,KAASA,SAASC,UAAlB,KAAkBA;AAAlB,SAC3BtG,eAAe;IACbuG,UAAUF;IACVG,UAAUF;IACVF;EAHa,CAAD;AADa;ACC7B,IAAMK,0BAA0B;AAEzB,IAAMC,YAAa,WAAA;AACxB,MAAMC,cAAc,SAAdA,aAAc,MAAA;AAAA,QAAGC,eAAH,KAAGA;AAAH,WACfH,0BADe,MACYG,eADZ;EAAA;AAEpB,SAAO1C,aAAa;IAClByC;IACAhC,eAAeb,qBACb,SAAA,OAAA;AAAA,UACE8C,eADF,MACEA,cACAC,cAFF,MAEEA,aACGC,mBAHL,8BAAA,OAAA,CAAA,gBAAA,aAAA,CAAA;AAAA,aAI2D;QACzDtD,UAAUmD,YAAY;UAAEC;QAAF,CAAD;QACrB5D,OAAOhD,eAAc,SAAA,CAAA,GAAM+G,cAAoBD,gBAApB,GAAN;UAA6CD;QAA7C,CAAA,CAAA;MAFoC;IAJ3D,CADiC;IAUnCtE,gBAAgBmD,mBAAkB;EAZhB,CAAD;AAcpB,EAjBwB;AAmBlB,IAAM1D,MAAO,WAAA;AAClB,MAAM2E,cAAc,SAAdA,aAAc,OAAA;AAAA,QAAGC,eAAH,MAAGA;AAAH,WACfH,0BADe,MACYG;EADZ;AAEpB,SAAO1C,aAAa;IAClByC;IACAhC,eAAeb,qBAAqB,SAAA,OAAA;AAAA,UAAG8C,eAAH,MAAGA;AAAH,aAAqC;QACvEpD,UAAUmD,YAAY;UAAEC;QAAF,CAAD;QACrB5D,OAAO,CAAA;MAFgE;IAArC,CAAD;IAInCT,gBAAgBO,aAAY;EANV,CAAD;AAQpB,EAXkB;AAaZ,IAAMkE,OAAQ,WAAA;AACnB,MAAML,cAAc,SAAdA,eAAc;AAAA,WAAMF;EAAN;AACpB,SAAOvC,aAAa;IAClByC;IACAhC,eAAeb,qBACb,SAACgD,kBAAD;AAAA,UAACA,qBAAD,QAAA;AAACA,2BAA+D,CAAA;MAAhE;AAAA,aAAwE;QACtEtD,UAAUmD,YAAW;QACrB3D,OAAO+D,cAAoBD,gBAApB;MAF+D;IAAxE,CADiC;IAMnCvE,gBAAgBmD,mBAAkB;EARhB,CAAD;AAUpB,EAZmB;AAcb,IAAMuB,aAAc,WAAA;AACzB,MAAMN,cAAc,SAAdA,aAAc,OAAA;AAAA,QAAGC,eAAH,MAAGA;AAAH,WACfH,0BADe,MACYG,eADZ;EAAA;AAEpB,SAAO1C,aAAa;IAClByC;IACAhC,eAAeb,qBAAqB,SAAA,OAAA;AAAA,UAAG8C,eAAH,MAAGA;AAAH,aAAqC;QACvEpD,UAAUmD,YAAY;UAAEC;QAAF,CAAD;QACrB5D,OAAO,CAAA;MAFgE;IAArC,CAAD;IAInCT,gBAAgBO,aAAY;EANV,CAAD;AAQpB,EAXyB;;;;;;;;AC7C1B,IAAMoE,qBAAqB;AAEpB,IAAMF,SAAQ,WAAA;AACnB,MAAML,eAAc,SAAdA,cAAc;AAAA,WAAMO;EAAN;AACpB,SAAOhD,aAAa;;IAElByC,aAAa,SAAA,YAACQ,SAAD;AAAA,aAAoBR,aAAW;IAA/B;IACbhC,eAAeb,qBAAqB,SAACsD,YAAD;AAAA,UAACA,eAAD,QAAA;AAACA,qBAA+B,CAAA;MAAhC;AAAA,aAAwC;QAC1E5D,UAAU0D;QACVlE,OAAOhD,eAAe+G,cAAoBK,UAApB,CAAD;MAFqD;IAAxC,CAAD;IAInC7E,gBAAgBmD,mBAAkB;EAPhB,CAAD;AASpB,EAXmB;AAab,IAAM1D,QAAO,WAAA;AAClB,MAAM2E,cAAc,SAAdA,aAAc,MAAA;AAAA,QAAGU,UAAH,KAAGA;AAAH,WAA6BH,qBAA7B,MAAmDG;EAAnD;AACpB,SAAOnD,aAAa;IAClByC;IACAhC,eAAeb,qBAAqB,SAAA,OAAA;AAAA,UAAGuD,UAAH,MAAGA;AAAH,aAA2B;QAC7D7D,UAAUmD,YAAY;UAAEU;QAAF,CAAD;QACrBrE,OAAO,CAAA;MAFsD;IAA3B,CAAD;IAInCT,gBAAgBO,aAAY;EANV,CAAD;AAQpB,EAVkB;AAYZ,IAAMwE,WAAY,WAAA;AACvB,MAAMX,cAAc,SAAdA,aAAc,OAAA;AAAA,QAAGU,UAAH,MAAGA;AAAH,WAA6BH,qBAA7B,MAAmDG,UAAnD;EAAA;AACpB,SAAOnD,aAAa;IAClByC;IACAhC,eAAeb,qBAAqB,SAAA,OAAA;AAAA,UAAGuD,UAAH,MAAGA;AAAH,aAA2B;QAC7D7D,UAAUmD,YAAY;UAAEU;QAAF,CAAD;QACrBrE,OAAO,CAAA;MAFsD;IAA3B,CAAD;IAInCT,gBAAgBO,aAAY;EANV,CAAD;AAQpB,EAVuB;AAsBjB,IAAMyE,YAAa,WAAA;AACxB,MAAMZ,cAAc,SAAdA,eAAc;AAAA,WAASO,qBAAT;EAAA;AACpB,SAAOhD,aAAa;IAClByC;IACAhC,eAAeb,qBACb,SAAA,OAAA;AAAA,UAAA,QAAA,UAAA,SAA4E,CAAA,IAA5E,OAAG+B,gBAAH,MAAGA,eAAe2B,gBAAlB,MAAkBA,eAAevB,WAAjC,MAAiCA,UAAawB,cAA9C,8BAAA,OAAA,CAAA,iBAAA,iBAAA,UAAA,CAAA;AAAA,aAAoF;QAClFjE,UAAUmD,YAAW;QACrB3D,OAAOhD,eAAc,SAAA,CAAA,GAChByH,aADgB;UAEnBC,gBAAgBF;QAFG,GAGhBT,eAAqBlB,aAArB,GACAkB,UAAgBd,QAAhB,CAJgB,CAAA;QAMrBlE,SAAS;;;;UAIP,iBAAiB;QAJV;MARyE;IAApF,CADiC;IAiBnCQ,gBAAgBO,aAAY;EAnBV,CAAD;AAwBpB,EA1BwB;AA4BlB,IAAM6E,gBAAgB;EAC3BhD,eAAeb,qBAAqB,SAAA,OAAA;QAAG8D,mBAAAA,MAAAA;gCACT/D,sBAAsB+D,gBAAD,GAAzCpE,WAAAA,sBAAAA,UAAUR,QAAAA,sBAAAA;AAElB,QAAI,CAACvD,UAAU+D,QAAD,GAAY;AACxB,YAAM,IAAIqE,MAAM,oCAAV;IACP;AACD,WAAO;MAAErE;MAAUR,OAAOhD,eAAegD,KAAD;IAAjC;EACR,CAPkC;EAQnCT,gBAAgBO,aAAY;AATD;;;;;;;;;AC/E7B,IAAMgF,qBAAkB;AAqBjB,IAAMpB,cAAa,WAAA;AACxB,MAAMC,eAAc,SAAdA,cAAc;AAAA,WAASmB,qBAAT;EAAA;AACpB,SAAO5D,aAAa;;IAElByC,aAAa,SAAA,YAACQ,SAAD;AAAA,aAAoBR,aAAW;IAA/B;IACbhC,eAAeb,qBACb,SAAA,MAAA;AAAA,UACEd,QADF,KACEA,OACAoD,OAFF,KAEEA,MACAC,UAHF,KAGEA,SACAC,UAJF,KAIEA,SACAT,gBALF,KAKEA,eACAkC,OANF,KAMEA,MACAP,gBAPF,KAOEA,eACGQ,UARL,8BAAA,MAAA,CAAA,SAAA,QAAA,WAAA,WAAA,iBAAA,QAAA,eAAA,CAAA;AAAA,aAS2B;QACzBxE,UAAUmD,aAAW;QACrB3D,OAAOhD,eAAc,SAAA;UACnBgD;UACA0E,gBAAgBF;UAChBO;UACAvB,UAAUF;QAJS,GAKhBS,cAAoB;UAAEX;UAAMC;QAAR,CAApB,GACAU,eAAqBlB,aAArB,GACAmC,OAPgB,CAAA;MAFI;IAT3B,CADiC;IAuBnCzF,gBAAgBO,aAAY;EA1BV,CAAD;AA4BpB,EA9BwB;AAgClB,IAAM8C,mBAAkB,WAAA;AAC7B,MAAMe,gBAAc,SAAdA,cAAc;AAAA,WAASmB,qBAAT;EAAA;AACpB,SAAO5D,aAAa;;IAElByC,aAAa,SAAA,YAACQ,SAAD;AAAA,aAAoBR,cAAW;IAA/B;IACbhC,eAAeb,qBAAqB,SAAA,OAAA;AAAA,UAAGd,QAAH,MAAGA,OAAU8D,mBAAb,8BAAA,OAAA,CAAA,OAAA,CAAA;AAAA,aAAmD;QACrFtD,UAAUmD,cAAW;QACrB3D,OAAK,SAAA;UAAIA;QAAJ,GAAc+D,cAAoBD,gBAApB,CAAd;MAFgF;IAAnD,CAAD;IAInCvE,gBAAgBO,aAAY;EAPV,CAAD;AASpB,EAX6B;AAavB,IAAMmF,WAAY,WAAA;AACvB,MAAMtB,gBAAc,SAAdA,cAAc;AAAA,WAASmB,qBAAT;EAAA;AACpB,SAAO5D,aAAa;;IAElByC,aAAa,SAAA,YAACQ,SAAD;AAAA,aAAoBR,cAAW;IAA/B;IACbhC,eAAeb,qBAAqB,SAAA,OAAA;AAAA,UAAGd,QAAH,MAAGA,OAAU8D,mBAAb,8BAAA,OAAA,CAAA,OAAA,CAAA;AAAA,aAAmD;QACrFtD,UAAUmD,cAAW;QACrB3D,OAAK,SAAA;UAAIA;QAAJ,GAAc+D,cAAoBD,gBAApB,CAAd;MAFgF;IAAnD,CAAD;IAInCvE,gBAAgBO,aAAY;EAPV,CAAD;AASpB,EAXuB;;;;;;;AChExB,IAAMoF,oBAAoB;AAEnB,IAAMlG,QAAO,WAAA;AAClB,MAAM2E,cAAc,SAAdA,aAAc,MAAA;AAAA,QAAGwB,WAAH,KAAGA;AAAH,WAA+BD,oBAA/B,MAAoDC;EAApD;AACpB,SAAOjE,aAAa;IAClByC;IACAhC,eAAeb,qBAAqB,SAAA,OAAA;AAAA,UAAGqE,WAAH,MAAGA;AAAH,aAA6B;QAC/D3E,UAAUmD,YAAY;UAAEwB;QAAF,CAAD;QACrBnF,OAAO,CAAA;MAFwD;IAA7B,CAAD;IAInCT,gBAAgBO,aAAY;EANV,CAAD;AAQpB,EAVkB;AAYZ,IAAM4D,cAAa,WAAA;AACxB,MAAMC,cAAc,SAAdA,aAAc,OAAA;AAAA,QAAGwB,WAAH,MAAGA;AAAH,WAA+BD,oBAA/B,MAAoDC,WAApD;EAAA;AACpB,SAAOjE,aAAa;IAClByC;IACAhC,eAAeb,qBACb,SAAA,OAAA;AAAA,UACEqE,WADF,MACEA,UACAC,QAFF,MAEEA,OACAvB,cAHF,MAGEA,aACGC,mBAJL,8BAAA,OAAA,CAAA,YAAA,SAAA,aAAA,CAAA;AAAA,aASwB;QACtBtD,UAAUmD,YAAY;UAAEwB;QAAF,CAAD;QACrBnF,OAAOhD,eAAc,SAAA,CAAA,GAChB+G,cAAoBD,gBAApB,GADgB;UAEnBD;UACAuB;QAHmB,CAAA,CAAA;MAFC;IATxB,CADiC;IAmBnC7F,gBAAgBmD,mBAAkB;EArBhB,CAAD;AAuBpB,EAzBwB;AA2BlB,IAAM2C,WAAY,WAAA;AACvB,MAAM1B,cAAc,SAAdA,aAAc,OAAA;AAAA,QAAGwB,WAAH,MAAGA;AAAH,WAA+BD,oBAA/B,MAAoDC,WAApD;EAAA;AACpB,SAAOjE,aAAa;IAClByC;IACAhC,eAAeb,qBACb,SAAA,OAAA;AAAA,UACEqE,WADF,MACEA,UACAtB,cAFF,MAEEA,aACGC,mBAHL,8BAAA,OAAA,CAAA,YAAA,aAAA,CAAA;AAAA,aAIuD;QACrDtD,UAAUmD,YAAY;UAAEwB;QAAF,CAAD;QACrBnF,OAAOhD,eAAc,SAAA,CAAA,GAChB+G,cAAoBD,gBAApB,GADgB;UAEnBD;QAFmB,CAAA,CAAA;MAFgC;IAJvD,CADiC;IAanCtE,gBAAgBmD,mBAAkB;EAfhB,CAAD;AAiBpB,EAnBuB;AAoBjB,IAAME,mBAAkB,WAAA;AAC7B,MAAMe,cAAc,SAAdA,aAAc,OAAA;AAAA,QAAGwB,WAAH,MAAGA;AAAH,WAA+BD,oBAA/B,MAAoDC,WAApD;EAAA;AACpB,SAAOjE,aAAa;IAClByC;IACAhC,eAAeb,qBACb,SAAA,OAAA;AAAA,UAAGqE,WAAH,MAAGA,UAAarB,mBAAhB,8BAAA,OAAA,CAAA,UAAA,CAAA;AAAA,aAAqE;QACnEtD,UAAUmD,YAAY;UAAEwB;QAAF,CAAD;QACrBnF,OAAO+D,cAAoBD,gBAApB;MAF4D;IAArE,CADiC;IAMnCvE,gBAAgBmD,mBAAkB;EARhB,CAAD;AAUpB,EAZ6B;;;;;;;;AC7D9B,IAAM4C,kBAAkB;AACxB,IAAMC,eAAe,SAAfA,cAAe,MAAA;AAAA,MAAGC,gBAAH,KAAGA;AAAH,SAAyCF,kBAAzC,MAA4DE;AAA5D;AAId,IAAMxB,SAAO9C,aAAa;EAC/ByC,aAAa4B;EACb5D,eAAe,SAAA,cAAA,OAAA;AAAA,QACbyB,OADa,MACbA,MACAC,UAFa,MAEbA,SACAC,UAHa,MAGbA,SACAmC,kBAJa,MAIbA;AAJa,WAWR;MACLjF,UAAU8E;MACVtF,OAAOhD,eAAc,SAAA,CAAA,GAChB+G,cAAoB;QAAEX;QAAMC;MAAR,CAApB,GADgB;QAEnBqC,KAAKD,mBAAF,OAAA,SAAEA,gBAAiB1C,KAAK,GAAtB;QACLS,UAAUF;MAHS,CAAA,CAAA;IAFhB;EAXQ;EAmBf/D,gBAAgBmD,mBAAkB;AArBH,CAAD;AAwBzB,IAAM1D,QAAMkC,aAAa;EAC9ByC,aAAa4B;EACb5D,eAAe,SAAAA,eAAA,OAAA;AAAA,QAAG6D,gBAAH,MAAGA;AAAH,WAAuC;MACpDhF,UAAU+E,aAAa;QAAEC;MAAF,CAAD;MACtBxF,OAAO,CAAA;IAF6C;EAAvC;EAIfT,gBAAgBO,aAAY;AANE,CAAD;AASxB,IAAM4D,cAAa,WAAA;AACxB,MAAMC,cAAcpG,KAAKgI,cAAc,SAAAI,WAAS;AAAA,WAAOA,YAAP;EAAA,CAAxB;AACxB,SAAOzE,aAAa;IAClByC;IACAhC,eAAe,SAAAA,eAAA,OAAA;AAAA,UACb6D,gBADa,MACbA,eACA3B,cAFa,MAEbA,aACGO,aAHU,8BAAA,OAAA,CAAA,iBAAA,aAAA,CAAA;AAAA,aAI6C;QAC1D5D,UAAUmD,YAAY;UAAE6B;QAAF,CAAD;QACrBxF,OAAOhD,eAAc,SAAA,CAAA,GAChB+G,cAAoBK,UAApB,GADgB;UAEnBP;QAFmB,CAAA,CAAA;MAFqC;IAJ7C;IAWftE,gBAAgBmD,mBAAkB;EAbhB,CAAD;AAepB,EAjBwB;;;;;;;ACpDlB,IAAMkD,6BAA6B,SAA7BA,4BAA6B,MAAA;AAAA,MAAGC,QAAH,KAAGA;AAAH,SAAkC,SAAA,OAAA;QAC1ExB,UAAAA,MAAAA;AAIA,QAAMqB,MAAM,CAAC1H,MAAMC,QAAQoG,OAAd,IAAyB,CAACA,OAAD,IAAYA;AAElD,QAAIqB,IAAI3I,SAAS,IAAI;AACnB,YAAM,IAAI8H,MACR,mFADI;IAGP;AAED,WAAOpD,MAAK,mCAAkCiE,IAAI3C,KAAJ,IAAlC,aAAuD8C,KAAvD;EACb;AAdyC;;;;;;;;;;ICiB9BC;CAAZ,SAAYA,WAAAA;AACVA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,aAAAA,IAAA;AACAA,EAAAA,UAAAA,YAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,aAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,eAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,YAAAA,IAAA;AACAA,EAAAA,UAAAA,MAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,eAAAA,IAAA;AACAA,EAAAA,UAAAA,KAAAA,IAAA;AACAA,EAAAA,UAAAA,YAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,YAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,YAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,aAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,MAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,UAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,WAAAA,IAAA;AACAA,EAAAA,UAAAA,MAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,YAAAA,IAAA;AACAA,EAAAA,UAAAA,OAAAA,IAAA;AACAA,EAAAA,UAAAA,SAAAA,IAAA;AACAA,EAAAA,UAAAA,QAAAA,IAAA;AACAA,EAAAA,UAAAA,mBAAAA,IAAA;AACAA,EAAAA,UAAAA,oBAAAA,IAAA;AACAA,EAAAA,UAAAA,MAAAA,IAAA;AACD,GA9GWA,aAAAA,WAAQ,CAAA,EAApB;ICjBYC;CAAZ,SAAYA,UAAAA;AACVA,EAAAA,SAAAA,QAAAA,IAAA;AACAA,EAAAA,SAAAA,SAAAA,IAAA;AACAA,EAAAA,SAAAA,OAAAA,IAAA;AACAA,EAAAA,SAAAA,WAAAA,IAAA;AACAA,EAAAA,SAAAA,QAAAA,IAAA;AACD,GANWA,YAAAA,UAAO,CAAA,EAAnB;ICUaC,YAAYzI,KAAK6D,iBAAiB,SAAA6E,aAAW;AAAA,SAAK;IAC7DC,QAAQ;MACNlH,KAAKiH,YAAYC,KAAD;MAChBlC,MAAMiC,YAAYC,MAAD;MACjB5B,UAAU2B,YAAYC,QAAD;MACrB3B,WAAW0B,YAAYC,SAAD;MACtBvB,eAAesB,YAAYC,aAAD;IALpB;IAORC,OAAO;MACLzC,WAAWuC,YAAYE,WAAD;MACtBvD,gBAAgBqD,YAAYE,gBAAD;MAC3Bd,UAAUY,YAAYE,QAAD;MACrBnH,KAAKiH,YAAYE,KAAD;IAJX;IAMPC,QAAQ;MACNxD,gBAAgBqD,YAAYG,gBAAD;MAC3B1C,WAAWuC,YAAYG,WAAD;MACtBnB,UAAUgB,YAAYG,QAAD;IAHf;IAKRtD,aAAa;MACXY,WAAWuC,YAAYnD,SAAD;MACtB9D,KAAKiH,YAAYnD,GAAD;MAChBkB,MAAMiC,YAAYnD,IAAD;MACjBmB,YAAYgC,YAAYnD,UAAD;IAJZ;IAMbI,QAAQ;MACNc,MAAMiC,YAAY/C,MAAD;MACjBlE,KAAKiH,YAAY/C,KAAD;MAChBQ,WAAWuC,YAAY/C,WAAD;IAHhB;EAzBqD;AAAL,CAA7B;",
  "names": ["parse", "index", "checkIsString", "getRefinement", "value", "isDefined", "x", "undefined", "getB", "a", "checkIsNonEmptyArray", "length", "compactDefined", "obj", "Object", "keys", "reduce", "acc", "key", "flow", "fns", "len", "y", "apply", "i", "call", "checkIsObject", "response", "Array", "isArray", "checkIsErrors", "errors", "every", "checkIsApiError", "getErrorForBadStatusCode", "jsonResponse", "source", "DecodingError", "message", "CONTENT_TYPE_RESPONSE_HEADER", "CONTENT_TYPE_JSON", "checkIsJsonResponse", "contentTypeHeader", "headers", "get", "ContentTypeHelpers", "type", "getJsonResponse", "json", "_err", "handleFetchResponse", "handleResponse", "ok", "then", "handledResponse", "status", "originalResponse", "error", "castResponse", "addQueryToUrl", "query", "url", "forEach", "queryKey", "searchParams", "set", "toString", "addPathnameToUrl", "pathname", "buildUrl", "apiUrl", "URL", "getQueryFromSearchParams", "parseQueryAndPathname", "createRequestHandler", "fn", "additionalFetchOptions", "baseReqParams", "makeEndpoint", "endpoint", "initMakeRequest", "accessKey", "apiVersion", "generalHeaders", "providedFetch", "fetch", "generalFetchOptions", "handleRequest", "method", "endpointHeaders", "body", "signal", "fetchOptions", "Authorization", "fetchToUse", "TOTAL_RESPONSE_HEADER", "getTotalFromApiFeedResponse", "totalsStr", "total", "parseInt", "Number", "isInteger", "handleFeedResponse", "results", "getCollections", "collectionIds", "collections", "join", "getTopics", "topicIds", "topics", "getFeedParams", "page", "perPage", "orderBy", "per_page", "order_by", "COLLECTIONS_PATH_PREFIX", "getPhotos", "getPathname", "collectionId", "orientation", "paginationParams", "Query", "list", "getRelated", "PHOTOS_PATH_PREFIX", "_params", "feedParams", "photoId", "getStats", "getRandom", "contentFilter", "queryParams", "content_filter", "trackDownload", "downloadLocation", "Error", "SEARCH_PATH_PREFIX", "lang", "filters", "getUsers", "USERS_PATH_PREFIX", "username", "stats", "getLikes", "BASE_TOPIC_PATH", "getTopicPath", "topicIdOrSlug", "topicIdsOrSlugs", "ids", "topicPath", "trackNonHotLinkedPhotoView", "appId", "Language", "OrderBy", "createApi", "makeRequest", "photos", "users", "search"]
}
